@inject CertificatesService svc
@inject IJSRuntime js

<div class="d-flex flex-column flex-shrink-0 p-3 bg-body-tertiary" style="min-width: 280px;">
    <div class="dropdown">
        <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
            <span class="fs-5">
                @if (Parent == null)
                {
                    <i class="bi bi-shield-lock-fill me-1"></i>
                    <span>Certificates</span>
                }
                else
                {
                    <i class="bi @(Parent.Authoritative ? "bi-lock-fill" : "bi-lock") me-1"></i>
                    <span>@Parent.Name</span>
                }
            </span>
        </a>
        <ul class="dropdown-menu shadow">
            @if (Parent == null || Parent.Authoritative)
            {
                <li>
                    <a class="dropdown-item text-success" href="#" @onclick="@(() => { ShowModal = true; })">
                        <i class="bi bi-plus-circle me-2"></i>
                        Create Certificate
                    </a>
                </li>
            }
            @if (Parent != null && Parent.Authoritative)
            {
                <li><hr class="dropdown-divider"></li>
            }
            @if (Parent != null)
            {
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(async () => { await DownloadCertificate(ExportFormat.Pfx); })">
                        <i class="bi bi-download me-2"></i>
                        Download Certificate (pfx)
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(async () => { await DownloadCertificate(ExportFormat.Cer); })">
                        <i class="bi bi-download me-2"></i>
                        Download Certificate (cer)
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(async () => { await DownloadCertificate(ExportFormat.Pem); })">
                        <i class="bi bi-download me-2"></i>
                        Download Certificate (pem)
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(async () => { await DownloadCertificate(ExportFormat.Chain); })">
                        <i class="bi bi-download me-2"></i>
                        Download Chain (pem)
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(async () => { await DownloadCertificate(ExportFormat.PrivateKey); })">
                        <i class="bi bi-download me-2"></i>
                        Download Private Key (pem)
                    </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <a class="dropdown-item text-danger" href="#" @onclick="@(() => { ShowDeleteModal = true; })">
                        <i class="bi bi-trash me-2"></i>
                        Delete Certificate
                    </a>
                </li>
            }
        </ul>
    </div>
    <hr>
    <ul class="nav nav-pills flex-column mb-auto">
        @if (Certificates == null)
        {
            <li>
                <a class="nav-link text-white">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Loading...
                </a>
            </li>
        }
        else
        {
            @foreach (var certificate in Certificates)
            {
                <li key="@certificate.Id">
                    <a href="#" class="nav-link @(Selected == certificate ? "active" : "text-white")" @onclick="@(() => OnCertificateClick(certificate))">
                        <i class="bi @(certificate.Authoritative ? "bi-lock-fill" : "bi-lock") me-2"></i>
                        @certificate.Name
                    </a>
                </li>
            }
        }
    </ul>
    @if (Parent != null)
    {
        <div class="card mt-3">
            <div class="card-body text-secondary">
                <p class="card-text">Valid From: @Parent.NotBefore</p>
                <p class="card-text">Valid To: @Parent.NotAfter</p>
            </div>
        </div>
    }
</div>

@if (ShowModal)
{
    <div class="modal show" tabindex="-1" style="display:block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header text-bg-success">
                    <h5 class="modal-title">
                        <i class="bi bi-plus-circle me-2"></i>
                        Create Certificate
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@(() => { ShowModal = false; })"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" role="switch" id="authoritative" @bind="NewCertificate.Authoritative">
                            <label class="form-check-label" for="authoritative">Authoritative</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="name" @bind="NewCertificate.Name">
                            <label for="name">Name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="number" class="form-control" id="years" @bind="NewCertificate.Years">
                            <label for="years">Years</label>
                        </div>
                        <div class="form-floating mb-3">
                            <textarea class="form-control" id="domains" style="height: 100px" @bind="NewCertificate.Domains" disabled="@NewCertificate.Authoritative"></textarea>
                            <label for="domains">Domains</label>
                        </div>
                        <div class="form-floating">
                            <textarea class="form-control" id="ips" style="height: 100px" @bind="NewCertificate.IPs" disabled="@NewCertificate.Authoritative"></textarea>
                            <label for="ips">IPs</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" @onclick="CreateCertificate">Create Certificate</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (ShowDeleteModal)
{
    <div class="modal show" tabindex="-1" style="display:block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header text-bg-danger">
                    <h5 class="modal-title">
                        <i class="bi bi-trash me-2"></i>
                        Delete Certificate
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@(() => { ShowDeleteModal = false; })"></button>
                </div>
                <div class="modal-body">
                    @if (Parent!.Authoritative)
                    {
                        <p>Are you sure you want to delete <strong>@Parent.Name</strong> and all its related certificates?</p>
                    }
                    else
                    {
                        <p>Are you sure you want to delete <strong>@Parent.Name</strong>?</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="DeleteCertificate">Delete Certificate</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (Selected != null)
{
    <div class="blade-divider"></div>
    <CertificateBlade Parent="@Selected" OnChildDeleted="OnChildDeletedAsync" />
}

@code {
    [Parameter]
    public EventCallback OnChildDeleted { get; set; }

    [Parameter]
    public CertificateResponse? Parent { get; set; }

    private CertificateResponse? PrevParent { get; set; }

    private CertificateResponse? Selected { get; set; }

    private List<CertificateResponse>? Certificates;

    private bool ShowModal { get; set; }

    private bool ShowDeleteModal { get; set; }

    private CertificateModel NewCertificate { get; set; } = new CertificateModel();

    protected override async Task OnInitializedAsync()
    {
        NewCertificate.Authoritative = Parent == null;
        Certificates = await svc.LoadCertificates(Parent?.Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PrevParent != Parent)
        {
            PrevParent = Parent;
            Selected = null;
            Certificates = await svc.LoadCertificates(Parent?.Id);
        }
    }

    private async Task OnChildDeletedAsync()
    {
        Selected = null;
        Certificates = await svc.LoadCertificates(Parent?.Id);
    }

    private void OnCertificateClick(CertificateResponse selected)
    {
        if (Selected == selected)
        {
            Selected = null;
        }
        else
        {
            Selected = selected;
        }
    }

    protected async Task DownloadCertificate(ExportFormat format)
    {
        await svc.DownloadCertificate(js, Parent!.Id, format);
    }

    protected async Task CreateCertificate()
    {
        Certificates = null;
        ShowModal = false;
        StateHasChanged();
        await Task.Yield();

        var id = await svc.CreateCertificate(NewCertificate, Parent?.Id);
        Certificates = await svc.LoadCertificates(Parent?.Id);
        Selected = Certificates.Single(x => x.Id == id);
        NewCertificate = new() { Authoritative = Parent == null };
    }

    protected async Task DeleteCertificate()
    {
        Certificates = null;
        ShowDeleteModal = false;
        StateHasChanged();
        await Task.Yield();

        await svc.DeleteCertificate(Parent!.Id);
        await OnChildDeleted.InvokeAsync();
    }
}
