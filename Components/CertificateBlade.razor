@inject CertificatesContext db
@inject IJSRuntime JS

<div class="d-flex flex-column flex-shrink-0 p-3 bg-body-tertiary" style="min-width: 280px;">
    <div class="dropdown">
        <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
            <span class="fs-5">
                @if (Parent == null)
                {
                    <i class="bi bi-shield-lock-fill me-1"></i>
                    <span>Certificates</span>
                }
                else
                {
                    <span>@Parent.Name</span>
                }
            </span>
        </a>
        <ul class="dropdown-menu shadow">
            @if (Parent == null || Parent.Authoritative)
            {
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(() => { ShowModal = true; })">
                        <i class="bi bi-plus-circle me-2"></i>
                        Create Certificate
                    </a>
                </li>
            }
            @if (Parent != null && Parent.Authoritative)
            {
                <li><hr class="dropdown-divider"></li>
            }
            @if (Parent != null)
            {
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(async () => { await DownloadCertificate(ExportFormat.Pfx); })">
                        <i class="bi bi-download me-2"></i>
                        Download Certificate (.pfx)
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(async () => { await DownloadCertificate(ExportFormat.Cer); })">
                        <i class="bi bi-download me-2"></i>
                        Download Certificate (.cer)
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(async () => { await DownloadCertificate(ExportFormat.Pem); })">
                        <i class="bi bi-download me-2"></i>
                        Download Certificate (.pem)
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(async () => { await DownloadCertificate(ExportFormat.Chain); })">
                        <i class="bi bi-download me-2"></i>
                        Download Chain (.pem)
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="#" @onclick="@(async () => { await DownloadCertificate(ExportFormat.PrivateKey); })">
                        <i class="bi bi-download me-2"></i>
                        Download Private Key
                    </a>
                </li>
            }
            @if (Parent != null)
            {
                <li><hr class="dropdown-divider"></li>
                <li>
                    <a class="dropdown-item text-danger" href="#" @onclick="@(() => { ShowDeleteModal = true; })">
                        <i class="bi bi-trash me-2"></i>
                        Delete Certificate
                    </a>
                </li>
            }
        </ul>
    </div>
    <hr>
    <ul class="nav nav-pills flex-column mb-auto">
        @if (Certificates == null)
        {
            <li>
                <a class="nav-link text-white">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Loading...
                </a>
            </li>
        }
        else
        {
            @foreach (var certificate in Certificates)
            {
                <li key="@certificate.Id">
                    <a href="#" class="nav-link @(Selected == certificate ? "active" : "text-white")" @onclick="@(() => OnCertificateClick(certificate))">
                        <i class="bi bi-lock-fill me-2"></i>
                        @certificate.Name
                    </a>
                </li>
            }
        }
    </ul>
    @if (Parent != null)
    {
        <div class="card mt-3">
            <div class="card-body text-secondary">
                <p class="card-text">Is Authoritative: @Parent.Authoritative</p>
                <p class="card-text">Valid From: @Parent.NotBefore</p>
                <p class="card-text">Valid To: @Parent.NotAfter</p>
            </div>
        </div>
    }
</div>

@if (ShowModal)
{
    <div class="modal show" tabindex="-1" style="display:block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Certificate</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@(() => { ShowModal = false; })"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" role="switch" id="authoritative" @bind="NewCertificate.Authoritative">
                            <label class="form-check-label" for="authoritative">Authoritative</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="name" @bind="NewCertificate.Name">
                            <label for="name">Name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="number" class="form-control" id="years" @bind="NewCertificate.Years">
                            <label for="years">Years</label>
                        </div>
                        <div class="form-floating mb-3">
                            <textarea class="form-control" id="domains" style="height: 100px" @bind="NewCertificate.Domains" disabled="@NewCertificate.Authoritative"></textarea>
                            <label for="domains">Domains</label>
                        </div>
                        <div class="form-floating">
                            <textarea class="form-control" id="ips" style="height: 100px" @bind="NewCertificate.IPs" disabled="@NewCertificate.Authoritative"></textarea>
                            <label for="ips">IPs</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="CreateCertificate">Create Certificate</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (ShowDeleteModal)
{
    <div class="modal show" tabindex="-1" style="display:block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Certificate</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@(() => { ShowDeleteModal = false; })"></button>
                </div>
                <div class="modal-body">
                    @if (Parent.Authoritative)
                    {
                        <p>Are you sure you want to delete <strong>@Parent.Name</strong> and all its related certificates?</p>
                    }
                    else
                    {
                        <p>Are you sure you want to delete <strong>@Parent.Name</strong>?</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="DeleteCertificate">Delete Certificate</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (Selected != null)
{
    <div class="blade-divider"></div>
    <CertificateBlade Parent="@Selected" OnChildDeleted="OnChildDeletedAsync" />
}

@code {
    [Parameter]
    public EventCallback OnChildDeleted { get; set; }

    [Parameter]
    public CertificateResponse? Parent { get; set; }

    private CertificateResponse? PrevParent { get; set; }
    
    private CertificateResponse? Selected { get; set; }
    
    private List<CertificateResponse>? Certificates;
    
    public record CertificateResponse(Guid Id, Guid? Pid, string Name, bool Authoritative, string NotBefore, string NotAfter);

    private bool ShowModal { get; set; }
    
    private bool ShowDeleteModal { get; set; }

    public enum ExportFormat { None, Pfx, Cer, Pem, Chain, PrivateKey }

    private CertificateModel NewCertificate { get; set; } = new CertificateModel();

    private class CertificateModel
    {
        public bool Authoritative { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Years { get; set; } = 1;
        public string Domains { get; set; } = string.Empty;
        public string IPs { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        NewCertificate.Authoritative = Parent == null;
        Certificates = await LoadCertificates(Parent?.Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PrevParent != Parent)
        {
            PrevParent = Parent;
            Certificates = await LoadCertificates(Parent?.Id);
            Selected = null;
        }
    }

    private async Task OnChildDeletedAsync()
    {
        Certificates = await LoadCertificates(Parent?.Id);
        Selected = null;
    }

    private void OnCertificateClick(CertificateResponse selected)
    {
        if (Selected == selected)
        {
            Selected = null;
        }
        else
        {
            Selected = selected;
        }
    }

    protected async Task<List<CertificateResponse>> LoadCertificates(Guid? id)
    {
        return await db.Certificates
            .Where(x => x.Pid == id)
            .OrderBy(x => x.Name)
            .Select(x => new CertificateResponse
            (
                x.Id,
                x.Pid,
                x.Name,
                x.Authoritative,
                x.NotBefore,
                x.NotAfter
            ))
            .ToListAsync();
    }

    protected async Task DownloadCertificate(ExportFormat format)
    {
        var certificate = await db.Certificates.SingleAsync(x => x.Id == Parent.Id);

        if (format == ExportFormat.Pfx)
        {
            using var cert = X509Certificate2.CreateFromPem(certificate.CertificatePem);
            using var key = RSA.Create();
            key.ImportFromPem(certificate.PrivateKeyPem);
            using var certWithKey = cert.CopyWithPrivateKey(key);
            using var stream = new MemoryStream(certWithKey.Export(X509ContentType.Pfx));
            using var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", $"{certificate.Name}.pfx", streamRef);
        }
        else if (format == ExportFormat.Cer)
        {
            using var cert = X509Certificate2.CreateFromPem(certificate.CertificatePem);
            using var stream = new MemoryStream(cert.Export(X509ContentType.Cert));
            using var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", $"{certificate.Name}.cer", streamRef);
        }
        else if(format == ExportFormat.Pem)
        {
            using var stream = new MemoryStream(Encoding.UTF8.GetBytes(certificate.CertificatePem));
            using var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", $"{certificate.Name}.pem", streamRef);
        }
        else if (format == ExportFormat.Chain)
        {
            var chain = new List<Certificate> { certificate };
            var pid = certificate.Pid;

            while (pid.HasValue)
            {
                var parent = await db.Certificates.SingleOrDefaultAsync(x => x.Id == pid.Value);
                pid = parent?.Pid;
                if (parent != null)
                {
                    chain.Add(parent);
                }
            }

            using var stream = new MemoryStream(Encoding.UTF8.GetBytes(string.Join('\n', chain.Select(x => x.CertificatePem))));
            using var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", $"{certificate.Name}.chain", streamRef);
        }
        else if (format == ExportFormat.PrivateKey)
        {
            using var stream = new MemoryStream(Encoding.UTF8.GetBytes(certificate.PrivateKeyPem));
            using var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", $"{certificate.Name}.key", streamRef);
        }
    }

    protected async Task DeleteCertificate()
    {
        Certificates = null;
        ShowDeleteModal = false;
        StateHasChanged();
        await Task.Yield();

        var certificate = await db.Certificates.Include(x => x.Children).SingleAsync(x => x.Id == Parent.Id);
        db.Certificates.Remove(certificate);

        await foreach (var child in GetCertificates(certificate))
        {
            db.Certificates.Remove(child);
        }

        await db.SaveChangesAsync();

        await OnChildDeleted.InvokeAsync();
    }

    protected async IAsyncEnumerable<Certificate> GetCertificates(Certificate certificate)
    {
        if (certificate.Children != null)
        {
            foreach (var child in certificate.Children)
            {
                yield return child;

                if (child.Children != null)
                {
                    await foreach (var descendant in GetCertificates(child))
                    {
                        yield return descendant;
                    }
                }
            }
        }
    }

    protected async Task CreateCertificate()
    {
        Certificates = null;
        ShowModal = false;
        StateHasChanged();
        await Task.Yield();

        using var rsa = RSA.Create(NewCertificate.Authoritative ? 4096 : 2048);

        var now = DateTimeOffset.UtcNow;

        var notBefore = now
            .AddDays(-(now.Day - 1))
            .AddHours(-now.Hour)
            .AddMinutes(-now.Minute)
            .AddSeconds(-now.Second);

        var notAfter = notBefore.AddYears(NewCertificate.Years).AddSeconds(-1);

        var nameBuilder = new X500DistinguishedNameBuilder();
        nameBuilder.AddOrganizationName(NewCertificate.Name);
        nameBuilder.AddCommonName(NewCertificate.Name);
        var name = nameBuilder.Build();

        var certificateRequest = new CertificateRequest(
            name,
            rsa,
            HashAlgorithmName.SHA256,
            RSASignaturePadding.Pkcs1
        );

        certificateRequest.CertificateExtensions.Add(
            new X509EnhancedKeyUsageExtension(
                new OidCollection { new Oid("1.3.6.1.5.5.7.3.1"), new Oid("1.3.6.1.5.5.7.3.2") },
                false
            )
        );

        certificateRequest.CertificateExtensions.Add(
            new X509SubjectKeyIdentifierExtension(certificateRequest.PublicKey, false)
        );

        X509Certificate2 cert;

        if (NewCertificate.Authoritative)
        {
            certificateRequest.CertificateExtensions.Add(
                X509BasicConstraintsExtension.CreateForCertificateAuthority()
            );

            certificateRequest.CertificateExtensions.Add(
                new X509KeyUsageExtension(X509KeyUsageFlags.KeyCertSign, false)
            );
        }
        else
        {
            certificateRequest.CertificateExtensions.Add(
                X509BasicConstraintsExtension.CreateForEndEntity()
            );

            certificateRequest.CertificateExtensions.Add(
                new X509KeyUsageExtension(X509KeyUsageFlags.DigitalSignature, false)
            );
        }

        if (Parent == null)
        {
            if (!NewCertificate.Authoritative)
            {
                var subjectBuilder = new SubjectAlternativeNameBuilder();

                if (!string.IsNullOrEmpty(NewCertificate.Domains))
                {
                    foreach (var domain in NewCertificate.Domains.Split('\n'))
                    {
                        subjectBuilder.AddDnsName(domain);
                    }
                }

                if (!string.IsNullOrEmpty(NewCertificate.IPs))
                {
                    foreach (var ip in NewCertificate.IPs.Split('\n'))
                    {
                        subjectBuilder.AddIpAddress(IPAddress.Parse(ip));
                    }
                }

                certificateRequest.CertificateExtensions.Add(subjectBuilder.Build());
            }

            cert = certificateRequest.CreateSelfSigned(notBefore, notAfter);
        }
        else
        {
            var parent = await db.Certificates.SingleAsync(x => x.Id == Parent.Id);

            using var caCert = X509Certificate2.CreateFromPem(parent.CertificatePem);
            using var caKey = RSA.Create();
            caKey.ImportFromPem(parent.PrivateKeyPem);
            using var caCertWithKey = caCert.CopyWithPrivateKey(caKey);

            certificateRequest.CertificateExtensions.Add(
                X509AuthorityKeyIdentifierExtension.CreateFromCertificate(caCertWithKey, true, true)
            );

            if (!NewCertificate.Authoritative)
            {
                var subjectBuilder = new SubjectAlternativeNameBuilder();

                if (!string.IsNullOrEmpty(NewCertificate.Domains))
                {
                    foreach (var domain in NewCertificate.Domains.Split('\n'))
                    {
                        subjectBuilder.AddDnsName(domain);
                    }
                }

                if (!string.IsNullOrEmpty(NewCertificate.IPs))
                {
                    foreach (var ip in NewCertificate.IPs.Split('\n'))
                    {
                        subjectBuilder.AddIpAddress(IPAddress.Parse(ip));
                    }
                }

                certificateRequest.CertificateExtensions.Add(subjectBuilder.Build());
            }

            cert = certificateRequest.Create(
                caCertWithKey,
                notBefore,
                notAfter,
                RandomNumberGenerator.GetBytes(8)
            );
        }

        var certificate = new Certificate
            {
                Id = Guid.NewGuid(),
                Pid = Parent?.Id,
                Authoritative = NewCertificate.Authoritative,
                Name = NewCertificate.Name,
                PrivateKeyPem = rsa.ExportRSAPrivateKeyPem(),
                CertificatePem = cert.ExportCertificatePem(),
                NotBefore = notBefore.ToString("yyyy-MM-dd"),
                NotAfter = notAfter.ToString("yyyy-MM-dd"),
            };

        cert.Dispose();

        await db.Certificates.AddAsync(certificate);
        await db.SaveChangesAsync();

        Certificates = await LoadCertificates(Parent?.Id);
        NewCertificate = new() { Authoritative = Parent == null };
    }
}
